# Server Port 번호
server:
  port: 8081

# S3 설정을 위한 클라우드 설정
cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    region:
      static: ${S3_REGION}
    stack:
      auto: false
    s3:
      bucket: ${S3_BUCKET_NAME}

# 스프링 설정 관련
spring:
  # 404 URL_NOT_FOUND 예외 처리를 위한 설정
  mvc:
    throw-exception-if-no-handler-found: true
  web:
    resources:
      add-mappings: false

  # .env 설정, 이를 설정함으로써 메인 애플리케이션 클래스에 입력값들을 명시하지 않아도 됨
  config:
    import: optional:file:.env[.properties]

  # jwt 키 설정
  jwt:
    secret: ${JWT_SECRET}

  # DB 설정
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  # OAuth2 설정
  security:
    oauth2:
      client:
        registration:
          google:
              clientName: google
              clientId: ${GOOGLE_CLIENT_ID}
              clientSecret: ${GOOGLE_CLIENT_SECRET}
              authorizationGrantType: authorization_code
              redirectUri: http://localhost:8081/login/oauth2/code/google
              scope:
                - email
                - profile
          naver:
            clientName: naver
            clientId: ${NAVER_CLIENT_ID}
            clientSecret: ${NAVER_CLIENT_SECRET}
            authorizationGrantType: authorization_code
            redirectUri: http://localhost:8081/login/oauth2/code/naver
            scope:
              - email
              - profile
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize   # 사용자 인증을 위한 URL
            token-uri: https://nid.naver.com/oauth2.0/token               # 액세스 토큰을 발급받기 위한 URL
            user-info-uri: https://openapi.naver.com/v1/nid/me            # 인증된 사용자의 정보를 가져오기 위한 URL
            user-name-attribute: response                                 # 사용자 정보 응답에서 사용자 식별자로 사용할 속성 지정

  # 출력 창에 나타낼 출력 코드에 대한 정렬 및 DB 생성 방법 관련
  jpa:
    hibernate:
      ddl-auto: update            # 자동 실행 전략
    properties:
      hibernate:
        format_sql: true          # SQL 포맷
        highlight_sql: true       # 가독성 (컬러)
    database: mysql

# 출력 창에 나타날 출력 코드에 대한 포맷
logging.level:
  root: info                              # 전체 기본 레벨
  org.hibernate.SQL: debug                # sql 로그
  org.springframework.security: debug     # 인증/인가 요청
  org.springframework.web: debug          # web 요청